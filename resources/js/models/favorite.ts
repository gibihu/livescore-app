import { FavoriteType } from "@/types/app";

export class Favorite {
  private static storageKey = 'favorites';

  /** ‚úÖ ‡∏î‡∏∂‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î */
  static get(): FavoriteType[] {
    const data = localStorage.getItem(this.storageKey);
    return data ? (JSON.parse(data) as FavoriteType[]) : [];
  }

  /** üîç ‡∏´‡∏≤ favorite ‡∏ï‡∏≤‡∏° match_id */
  static find(match_id: string): FavoriteType | undefined {
    const all = this.get();
    return all.find((f) => f.match_id === match_id);
  }

  /** ‚ûï ‡πÄ‡∏û‡∏¥‡πà‡∏° favorite ‡πÉ‡∏´‡∏°‡πà (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß‡πÑ‡∏°‡πà‡πÄ‡∏û‡∏¥‡πà‡∏°) */
  static add(data: Omit<FavoriteType, 'create_at' | 'updated_at'>): FavoriteType | null {
    const all = this.get();
    const exists = all.some((f) => f.match_id === data.match_id);

    if (exists) return null; // ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß ‡πÑ‡∏°‡πà‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ã‡πâ‡∏≥

    const now = new Date().toISOString();
    const newFav: FavoriteType = {
      ...data,
      create_at: now,
      updated_at: now,
    };

    all.push(newFav);
    localStorage.setItem(this.storageKey, JSON.stringify(all));

    return newFav;
  }

  /** üîÑ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏´‡∏£‡∏∑‡∏≠‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà ‡∏ñ‡πâ‡∏≤ match_id ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏à‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà */
  static update(match_id: string, newData: Partial<FavoriteType>): FavoriteType {
    const all = this.get();
    const index = all.findIndex((f) => f.match_id === match_id);
    const now = new Date().toISOString();

    if (index !== -1) {
      // ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß ‚Üí ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï
      all[index] = {
        ...all[index],
        ...newData,
        updated_at: now,
      };
    } else {
      // ‡πÑ‡∏°‡πà‡∏°‡∏µ ‚Üí ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà
      all.push({
        match_id,
        status: newData.status ?? 'active',
        create_at: now,
        updated_at: now,
      });
    }

    localStorage.setItem(this.storageKey, JSON.stringify(all));
    return this.find(match_id)!;
  }
}
